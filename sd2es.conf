input {
  stdin {
    add_field => { "service_name" => "${SERVICE_NAME}" }
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601} "
      negate => true
      what => previous
    }
  }
}

filter {

  mutate {
    add_field => { "fqdn" => "${HOSTNAME}" }
    remove_field => [ "host" ]
  }

  if [service_name] == "mfs" or [service_name] == "mfs_maprdb" {
    grok {
      match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}$" }
      overwrite => [ "message" ]
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSSS" ]
      target => "@timestamp"
      timezone => [ "${TIMEZONE}" ]
    }
  }

  if [service_name] == "warden" {
      grok {
        match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{DATA:class} %{DATA:thread} %{GREEDYDATA:message}$" }
        overwrite => [ "message" ]
      }

      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
        target => "@timestamp"
        timezone => [ "${TIMEZONE}" ]
      }
  }

  if [service_name] == "syslog" {
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:message}" }
        overwrite => [ "message" ]
      }

      date {
        match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        target => "@timestamp"
        timezone => [ "${TIMEZONE}" ]
      }
  }

  if [service_name] == "zookeeper" {
      grok {
        match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} %{DATA:id} - %{LOGLEVEL:loglevel} %{DATA:class} - %{GREEDYDATA:message}$" }
        overwrite => [ "message" ]
      }

      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
        target => "@timestamp"
        timezone => [ "${TIMEZONE}" ]
      }
  }

  if [service_name] == "nodemanager" {
      grok {
        match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{DATA:class} %{GREEDYDATA:message}$" }
        overwrite => [ "message" ]
      }

      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
        target => "@timestamp"
        timezone => [ "${TIMEZONE}" ]
      }
  }

  if ![timestamp] {
    drop{}
  }
}

output {
    elasticsearch {
        hosts => '${ES_HOSTS}'
        index => "${INDEX}-%{+YYYY.MM.dd}"
    }
#    stdout {
#      codec => rubydebug
#    }
}
